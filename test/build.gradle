plugins {
	id 'org.springframework.boot' version '2.7.3-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
	id 'jacoco'
}



group = 'test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
	
	finalizedBy 'jacocoTestReport'
}


jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false
    }
    
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
	    rule {
	      // 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 합니다.
	      // 위의 리포트에서 'Total'로 표시된 부분입니다.
	      limit {
	        // 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
	        // 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
	        minimum = 0.30
	      }
	    }
    
        rule {
            enabled = true // 활성화
            element = 'METHOD' //	method 단위로 커버리지 체크
            // includes = []

            // 라인 커버리지 제한을 80%로 설정
			//	빈 줄을 제외한 실제 코드의 라인 
        	limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
              	minimum = 0.0
            }

            // 브랜치 커버리지 제한을 80%로 설정
            //	조건문 등의 분기
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다.
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
            //excludes = []
        }
    }
}